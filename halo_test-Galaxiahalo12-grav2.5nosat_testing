{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use(['classic'])\n",
    "import astropy.coordinates as coord\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.interpolate import interp1d\n",
    "from astropy.io import fits\n",
    "from scipy import stats\n",
    "from scipy.stats import binned_statistic\n",
    "from scipy.linalg import block_diag,eigh\n",
    "plt.rcParams['font.family']='stixgeneral'\n",
    "plt.rcParams.update({'font.size':10})\n",
    "from astropy.io import fits\n",
    "import ebf\n",
    "import pdb\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from astropy.coordinates import (CartesianRepresentation,CartesianDifferential)\n",
    "from astropy.coordinates import Galactic\n",
    "from astropy import units as u1\n",
    "from astropy.coordinates import SkyCoord\n",
    "from scipy import optimize\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import chisquare\n",
    "from itertools import groupby\n",
    "import scipy.integrate as integrate\n",
    "import scipy.special as special\n",
    "from scipy.stats import poisson\n",
    "from scipy.optimize import minimize\n",
    "from random import choices\n",
    "import scipy.stats as st\n",
    "from astropy.stats import jackknife_resampling\n",
    "from astropy.stats import jackknife_stats\n",
    "from scipy.integrate import simps\n",
    "import scipy\n",
    "scipy.__version__\n",
    "from autograd import grad\n",
    "import numpy.linalg as lin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Running a galaxia simulation for halo17 with mag ranging from 14-20 mag, r < 1000 kpc, fsample 0.1, popID10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=pd.read_csv(\"df3_halo12_grav2.5_testing.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting distance versus vrad (compared to Bullock 2005)\n",
    "\n",
    "plt.scatter(df3['Vgal'],df3['r'],s=1,c='b')\n",
    "plt.ylabel('Galactic Distance (kpc)')\n",
    "plt.xlabel('Radial Velocity (km/s)')\n",
    "#plt.xlim(-600,600)\n",
    "#plt.ylim(0,250)\n",
    "plt.show()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Velocity dispersion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Comp:\n",
    "    def __init__(self, x, y, z, rv, groupid):\n",
    "        '''\n",
    "        class for the input of the correlation function\n",
    "        :param x: x position for the target\n",
    "        :param y: y position for the target\n",
    "        :param z: z position for the target\n",
    "        :param rv: radial velocity for the target\n",
    "\n",
    "        '''\n",
    "\n",
    "        self.x = np.array(x)\n",
    "        self.y = np.array(y)\n",
    "        self.z = np.array(z)\n",
    "        self.rv = np.array(rv)\n",
    "        self.groupid = np.array(groupid)\n",
    "\n",
    "\n",
    "def v_diff(spaces, data, interval, times):\n",
    "    '''\n",
    "        :param spaces: Scale for space sparation\n",
    "        :param data: The orginal dataset\n",
    "        :param interval: raidal space interval for the shell of calculating the space separation\n",
    "\n",
    "\n",
    "    '''\n",
    "\n",
    "    vdiffhf = []\n",
    "    rlim = []\n",
    "    num = []\n",
    "    spectf = []\n",
    "    indexoutf = []\n",
    "\n",
    "    zmini = [20, 26, 32, 38, 44, 60, 76]\n",
    "    zmaxi = [26, 32, 38, 44, 60, 76, 100]\n",
    "    frac = []\n",
    "    for ii in range(0, 7, 1):\n",
    "        \n",
    "        rlim.append(zmini[ii])\n",
    "        zmin = zmini[ii]\n",
    "        zmax = zmaxi[ii]\n",
    "        dfx = pd.DataFrame()\n",
    "        dfxf = pd.DataFrame()\n",
    "        dfx['x'] = data['x'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        # print (dfx['x'])\n",
    "        dfx['y'] = data['y'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        dfx['z'] = data['z'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        dfx['Vgal'] = data['Vgal'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        dfx['index'] = data['index'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        time1 = data['time'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        frac1= len(time1[time1 < 1.0])/len(time1)\n",
    "        frac2= len(time1[time1 < 5.0])/len(time1)\n",
    "        frac3= len(time1[time1 < 10.0])/len(time1)\n",
    "        frac.append([frac1,frac2,frac3])\n",
    "        dfx['r'] = data['r'][(zmin < data['r']) & (data['r'] < zmax)]\n",
    "        # zmin=zmax\n",
    "        indexf = []\n",
    "        vdiff = []\n",
    "        spacei = []\n",
    "        num.append(len(dfx['r']))\n",
    "        print(len(dfx))\n",
    "        for kk in range(0, len(dfx), times):\n",
    "            minn = kk\n",
    "            maxx = kk + times\n",
    "            # print (minn,maxx)\n",
    "\n",
    "            v, i, s = pair_cal(data, dfx[minn:maxx], spaces)\n",
    "            # print (len(dfx))\n",
    "\n",
    "            indexf.append(i)\n",
    "            vdiff.append(v)\n",
    "            spacei.append(s)\n",
    "            # print (v)\n",
    "        # print (vdiff)\n",
    "        vdiffhf.append(np.concatenate((vdiff)))\n",
    "        # print (vdiffhf)\n",
    "        spectf.append(np.concatenate(spacei))\n",
    "        indexoutf.append(np.concatenate(indexf))\n",
    "\n",
    "    return rlim, vdiffhf, num, spectf, indexoutf,frac\n",
    "\n",
    "\n",
    "def pair_cal(dfall, df, spaces):\n",
    "    dfx2 = df.sort_values(by=['index'])\n",
    "\n",
    "    indexp = [x for x in dfall.index if x not in dfx2.index]\n",
    "    indexs = np.append(np.array(dfx2.index), np.array(indexp))\n",
    "\n",
    "    dfxf = dfall.loc[indexs]\n",
    "\n",
    "    k = Comp(dfx2['x'], dfx2['y'], dfx2['z'], dfx2['Vgal'], dfx2['index'])\n",
    "    k2 = Comp(dfxf['x'], dfxf['y'], dfxf['z'], dfxf['Vgal'], dfxf['index'])\n",
    "\n",
    "    # print (k.rv,k2.rv)\n",
    "\n",
    "\n",
    "    indexf = []\n",
    "    vdiff = []\n",
    "    spacedt = []\n",
    "\n",
    "    # calculating the velocity difference and space separation for each shell\n",
    "    for jj in range(0, len(k.rv)):\n",
    "\n",
    "        # print (k.rv,k2.rv)\n",
    "\n",
    "\n",
    "        vi = np.repeat(k.rv[jj], len(k2.rv))\n",
    "        xi = np.repeat(k.x[jj], len(k2.rv))\n",
    "        yi = np.repeat(k.y[jj], len(k2.rv))\n",
    "        zi = np.repeat(k.z[jj], len(k2.rv))\n",
    "\n",
    "        diffv = (vi - k2.rv) ** 2\n",
    "        diffx = (xi - k2.x) ** 2\n",
    "        diffy = (yi - k2.y) ** 2\n",
    "        diffz = (zi - k2.z) ** 2\n",
    "        indext = []\n",
    "        for kk in range(0, len(k2.groupid)):\n",
    "            indext.append(str(k.groupid[jj]) + '-' + str(k2.groupid[kk]))\n",
    "\n",
    "            # diff = diffv+diffx+diffy+diffz\n",
    "        spaced = diffx + diffy + diffz\n",
    "\n",
    "        indexf.append(indext)\n",
    "        # dia.append(diff)\n",
    "        vdiff.append(vi - k2.rv)\n",
    "        spacedt.append(np.sqrt(spaced))\n",
    "        # diaf = np.array(dia)[np.triu_indices(len(dfx['r']),1)]\n",
    "    vdiffto = np.array(vdiff)[np.triu_indices(len(k.rv), 1)]\n",
    "    specdto = np.array(spacedt)[np.triu_indices(len(k.rv), 1)]\n",
    "    indexfo = np.array(indexf)[np.triu_indices(len(k.rv), 1)]\n",
    "    # spect.append(specdto)\n",
    "    # indexout.append(indexfo[specdto < spaces])\n",
    "\n",
    "    # print (len(vdiffto),len(specdto))\n",
    "\n",
    "    # vdiffh.append(vdiffto[specdto < spaces])\n",
    "\n",
    "    # print (len(vdiff))\n",
    "    return vdiffto[specdto < spaces], indexfo[specdto < spaces], specdto\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1127\n",
      "1033\n",
      "712\n",
      "514\n",
      "1185\n",
      "1057\n",
      "1028\n",
      "1127\n",
      "1033\n",
      "712\n"
     ]
    }
   ],
   "source": [
    "rlimf = []\n",
    "test1f = []\n",
    "numf = []\n",
    "sepf = []\n",
    "indexf = []\n",
    "fract = []\n",
    "for scale in [6,12]:\n",
    "    rlim, test1, num, sep, indexii,frac = v_diff(scale, df3, 10,500)\n",
    "    rlimf.append(rlim)\n",
    "    test1f.append(test1)\n",
    "    numf.append(num)\n",
    "    sepf.append(sep)\n",
    "    indexf.append(indexii)\n",
    "    fract.append(frac)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[[0.0, 0.0, 0.9023957409050577],\n",
       "  [0.0, 0.0, 0.9583736689254598],\n",
       "  [0.0, 0.0, 0.9241573033707865],\n",
       "  [0.0, 0.0, 0.9221789883268483],\n",
       "  [0.0, 0.0, 0.9451476793248945],\n",
       "  [0.0, 0.000946073793755913, 0.9649952696310312],\n",
       "  [0.0, 0.0, 0.9698443579766537]],\n",
       " [[0.0, 0.0, 0.9023957409050577],\n",
       "  [0.0, 0.0, 0.9583736689254598],\n",
       "  [0.0, 0.0, 0.9241573033707865],\n",
       "  [0.0, 0.0, 0.9221789883268483],\n",
       "  [0.0, 0.0, 0.9451476793248945],\n",
       "  [0.0, 0.000946073793755913, 0.9649952696310312],\n",
       "  [0.0, 0.0, 0.9698443579766537]]]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "zmini = [20, 26, 32, 38, 44, 60, 76]\n",
    "zmaxi = [26, 32, 38, 44, 60, 76, 92]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x960 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2, 3, figsize=(20, 12), gridspec_kw={'wspace': 0.15, 'hspace': 0.2}, sharex=True, sharey=False)\n",
    "\n",
    "fig.subplots_adjust(left=0.05, bottom=0.05, right=0.9, top=0.9)\n",
    "k = 0\n",
    "sc = 1\n",
    "degrees = [(0, 0), (1, 0), (2, 0), (3, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (0, 3)]\n",
    "for index in range(ax.shape[0]):\n",
    "    for jndex in range(ax.shape[1]):\n",
    "        binning = np.histogram(test1f[sc][k], bins=100)\n",
    "        ax[index][jndex].step(binning[1][:100], binning[0], label=str(int(zmini[k])) +'-'+ str(int(zmaxi[k]))+' kpc')\n",
    "            \n",
    "        ax[index][jndex].set_xlim(-800,800)\n",
    "        ax[index][jndex].set_xlabel('Velocity Difference km/s')\n",
    "        ax[index][jndex].set_ylabel('Number of Pairs')\n",
    "        ax[index][jndex].legend( prop={'size': 20})\n",
    "        \n",
    "            \n",
    "            \n",
    "        k = k + 1\n",
    "plt.savefig('halo17_space_2_unbound.png')             \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_gaussian(params,x,ydata):\n",
    "    h1 = params[0]\n",
    "    c1 = params[1]\n",
    "    w1 = params[2]\n",
    "    offset = params[3]\n",
    "    \n",
    "    #x,ydata = s6b[num][:100],s6h[num]\n",
    "    ypred = gaussian(x, h1, c1, w1, offset) \n",
    "      \n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_gaussians(params,x,ydata):\n",
    "    h1 = params[0]\n",
    "    c1 = params[1]\n",
    "    w1 = params[2]\n",
    "    h2 = params[3]\n",
    "    c2 =params[4]\n",
    "    w2 =params[5]\n",
    "    offset = params[6]\n",
    "    sd = params[7]\n",
    "    #x,ydata = s6b[num][:100],s6h[num]\n",
    "    ypred = (gaussian(x, h1, c1, w1, offset=0) +\n",
    "        gaussian(x, h2, c2, w2, offset=0)  + \n",
    "        offset)\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL \n",
    "def gaussian(x, height, center, width, offset):\n",
    "    return height*np.exp(-(x - center)**2/(2*width**2)) + offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Loz(x,amp,x0,gamma):\n",
    "    return amp*gamma**2/(gamma**2+(x-x0)**2)\n",
    "def Lorentz1D_mo2(params,x,ydata):\n",
    "    \n",
    "    amplitude=params[0]\n",
    "    x_0=params[1] \n",
    "    fwhm=params[2]\n",
    "    \n",
    "   \n",
    "    offset = params[3]\n",
    "   \n",
    "    ypred = (Loz(x,amplitude,x_0,fwhm) +\n",
    "        offset)\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL \n",
    "\n",
    "def Lorentz1D_mo(params,xdata,ydata):\n",
    "    \n",
    "    \n",
    "    \n",
    "    amplitude=params[0]\n",
    "    x_0=params[1] \n",
    "    fwhm=params[2]\n",
    "    \n",
    "    h2 = params[3]\n",
    "    c2 =params[4]\n",
    "    w2 =params[5]\n",
    "    offset = params[6]\n",
    "   \n",
    "    ypred = (Loz(xdata,amplitude,x_0,fwhm) +\n",
    "        gaussian(xdata, h2, c2, w2, offset=0)  + \n",
    "        offset)\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL \n",
    "\n",
    "\n",
    "def Lorentz1D_mo_ra(x,amplitude,x_0,fwhm,h2, c2, w2, offset):\n",
    "    \n",
    "    #amplitude=params[0]\n",
    "    #x_0=params[1] \n",
    "    #fwhm=params[2]\n",
    "    \n",
    "    #h2 = params[3]\n",
    "    #c2 =params[4]\n",
    "    ##offset = params[6]\n",
    "   \n",
    "    \n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return (Loz(x,amplitude,x_0,fwhm) +\n",
    "        gaussian(x, h2, c2, w2, offset=0)  + \n",
    "        offset)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Lorentz1D_mo_e(params):\n",
    "    \n",
    "    \n",
    "    \n",
    "    amplitude=params[0]\n",
    "    x_0=params[1] \n",
    "    fwhm=params[2]\n",
    "    \n",
    "    h2 = params[3]\n",
    "    c2 =params[4]\n",
    "    w2 =params[5]\n",
    "    offset = params[6]\n",
    "   \n",
    "    ypred = (Loz(xdata,amplitude,x_0,fwhm) +\n",
    "        gaussian(xdata, h2, c2, w2, offset=0)  + \n",
    "        offset)\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_gaussians_ra(x, h1, c1, w1, h2, c2, w2, offset):\n",
    "    return (gaussian(x, h1, c1, w1, offset=0) +\n",
    "        gaussian(x, h2, c2, w2, offset=0)  + \n",
    "        offset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Loz(x,amp,x0,gamma):\n",
    "    return amp*gamma**2/(gamma**2+(x-x0)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Lorentz1D_mo_new(params,x,ydata,test,k):\n",
    "    params[k]=test\n",
    "    \n",
    "\n",
    "    ypred = (Loz(x,params[0],params[1],params[2]) +\n",
    "        gaussian(x, params[3], params[4], params[5], offset=0)  + \n",
    "        params[6])\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\n",
    "    LL = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "    #LL = 0\n",
    "    #for ii in range(0,len(ydata)):\n",
    "        #print (math.factorial(ydata[ii]))\n",
    "        #print (np.log(math.factorial(ydata[ii])))\n",
    "        #print (math.factorial(ydata[ii]),ypred[ii],np.log(ypred[ii]))\n",
    "        #LL = LL+np.log(np.asarray(math.factorial(ydata[ii])))+ypred[ii]-ydata[ii]*np.log(ypred[ii])\n",
    "    return LL \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def error(params,params2,x,ydata,guess6):\n",
    "    LL1=Lorentz1D_mo(params,x,ydata)\n",
    "    LL2=one_gaussian(params2,x,ydata)\n",
    "    aic1 = 2*LL1+14\n",
    "    aic2 = 2*LL2+8\n",
    "    para1=[]\n",
    "    para2f = []\n",
    "    aicf1=[]\n",
    "    aicf2=[]\n",
    "    \n",
    "    for ii in range(0,len(params)):\n",
    "        #ii=0\n",
    "        \n",
    "        para= params[ii]\n",
    "   \n",
    "        \n",
    "        #param[ii]=par\n",
    "       # LL1i=Lorentz1D_mo(params,x,ydata)\n",
    "       \n",
    "       # aic1i = 2*LL1i+14\n",
    "        #print (np.absolute(LL1-LL1i))\n",
    "        #for kk in range(0,100):\n",
    "            \n",
    "            \n",
    "        LL1i=Lorentz1D_mo(params,x,ydata)\n",
    "            \n",
    "            \n",
    "           \n",
    "   \n",
    "        \n",
    "        bds1=[(0, 9999), (-1000,1000), (0,50), (0,9999), (-1000,1000),(-50,9999),(-9999,9999)]\n",
    "        #bds1[ii]=(para-0.001, para+0.001)\n",
    "        #bds1[ii]=(0, 99)\n",
    "        resu = minimize(Lorentz1D_mo_new, guess6,args=(x,ydata,para,ii),method = 'Nelder-Mead',bounds=bds1)\n",
    "        p1 = resu.x\n",
    "            \n",
    "        ypred = (Loz(x, p1[0], p1[1], p1[2]) +\n",
    "        gaussian(x, p1[3], p1[4], p1[5], offset=0)  + \n",
    "        p1[6])\n",
    "        LL1  = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "        print ('3',LL1i,LL1)\n",
    "        while (np.absolute(np.absolute(LL1-LL1i)-0.50) > 0.1):\n",
    "            paraini=para\n",
    "            if np.absolute(para) < 1.5*np.absolute(paraini):\n",
    "                para=para+0.1*para\n",
    "                \n",
    "            elif (np.absolute(para) > 1.5*np.absolute(paraini)) & (np.absolute(para) < 2.0*np.absolute(paraini)):\n",
    "                para= paraini\n",
    "                para=para+0.05*para\n",
    "            elif np.absolute(para) > 100*np.absolute(paraini):\n",
    "                break\n",
    "            else:\n",
    "                para= paraini\n",
    "                para=para+0.01*para\n",
    "            LL1i=Lorentz1D_mo(params,x,ydata)\n",
    "            \n",
    "            \n",
    "           \n",
    "   \n",
    "            #parameters:\n",
    "            #amplitude, center, width of the inner function(gaussian or lorentz), amplitude,center,width of the outer function(gaussian)\n",
    "             #offset\n",
    "            #3.72083732e+03  4.25447029e+00  1.39629408e+00  9.99683439e+02\n",
    " #-3.47424188e+00  2.37711136e+02 -6.95352375e+00\n",
    "            #bds1=[(para-0.01, para+0.01), (-1000,1000), (0,300), (0,9999), (-1000,1000),(-50,9999),(-99,99)]\n",
    "            #bds1[ii]=(para-0.01, para+0.01)\n",
    "            \n",
    "            #resu = minimize(Lorentz1D_mo, guess6,args=(x,ydata),method = 'Nelder-Mead',bounds=bds1)\n",
    "            bds1=[(0, 99), (-1000,1000), (0,50), (0,9999), (-1000,1000),(-50,9999),(-9999,9999)]\n",
    "        #bds1[ii]=(para-0.001, para+0.001)\n",
    "        #bds1[ii]=(0, 99)\n",
    "            resu = minimize(Lorentz1D_mo_new, guess6,args=(x,ydata,para,ii),method = 'Nelder-Mead',bounds=bds1)\n",
    "            p1 = resu.x\n",
    "            \n",
    "            ypred = (Loz(x, p1[0], p1[1], p1[2]) +\n",
    "        gaussian(x, p1[3], p1[4], p1[5], offset=0)  + \n",
    "        p1[6])\n",
    "            LL1  = -np.sum(stats.poisson.logpmf(ydata, ypred))\n",
    "            #if (np.absolute(np.absolute(LL1-LL1i)-0.50) < 0.1):\n",
    "                \n",
    "                #LL1i=Lorentz1D_mo(params,x,ydata)\n",
    "        aic1i = 2*LL1+14\n",
    "                \n",
    "        para1.append(para)\n",
    "        aicf1.append(aic1i)\n",
    "        print (\"2\",para,LL1i,LL1,aic1i)\n",
    "                \n",
    "                #break\n",
    "                \n",
    "            #else:  \n",
    "                \n",
    "                #print (p1,LL1i,LL1)\n",
    "                #params[ii]=para\n",
    "                #LL1i=Lorentz1D_mo(params,x,ydata)\n",
    "                \n",
    "            \n",
    "            \n",
    "            #print (LL1,LL1i,para)\n",
    "        #para1.append(para)\n",
    "        #aicf1.append(aic1i)\n",
    "   \n",
    "    #print (para1,para2,aicf1,aicf2)\n",
    "    return para1,aicf1,aicf2\n",
    "        \n",
    "            \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fitting_result(x,y,amplitude, x_0, fwhm,h2,c2,w2,offset,bins,k,plot):\n",
    "\n",
    "   \n",
    "\n",
    "    guess6= [amplitude, x_0, fwhm, h2, c2, w2,offset]\n",
    "   \n",
    "    global xdata,ydata\n",
    "    xdata=x\n",
    "    ydata=y\n",
    "    #LL = -np.sum(stats.norm.logpdf(ydata, loc=yPred, scale=sd) )\n",
    "    bds1=((0, 9999), (-1000,1000), (0,300), (0,9999), (-1000,1000),(-50,9999),(-99,99))\n",
    "    optim = minimize(Lorentz1D_mo_e, guess6,method = 'Nelder-Mead',bounds=bds1)\n",
    "    optim2 = minimize(one_gaussian, [h2,c2,w2,offset],method = 'Nelder-Mead',args=(x,y))\n",
    "   \n",
    "    #np.sum(((y-two_gaussians(x, *optim1))**2)/(poisson.std(50,loc=0)**2))/(bins-len(guess6))\n",
    "    \n",
    "    #chisq1 = chisquare(y,two_gaussians(x, *optim1))[0]\n",
    "    #print (optim1.x)\n",
    "    p1 = optim.x\n",
    "    optim1=p1\n",
    "    ypred = (Loz(x, p1[0], p1[1], p1[2]) +\n",
    "        gaussian(x, p1[3], p1[4], p1[5], offset=0)  + \n",
    "        p1[6])\n",
    "    LL1  = -np.sum(stats.poisson.logpmf(y, ypred))\n",
    "    \n",
    "    hessian_ = hessian(Lorentz1D_mo_e)\n",
    "    print ('test',hessian_,ypred,ydata)\n",
    "    print ('1',Lorentz1D_mo_e(optim.x))\n",
    "    print ('parameters',optim.x)\n",
    "    print (hessian_(optim.x))\n",
    "    #var = lin.inv(hessian_(p1))\n",
    "    \n",
    "\n",
    "    print ('1',p1)\n",
    "    #chisq1 =  \n",
    "    #print ('err',np.sqrt(np.diag(success1)))\n",
    "    \n",
    "   \n",
    "    #np.sum(np.absolute((two_gaussians(x, *optim1) - y)**2/two_gaussians(x, *optim1)))\n",
    "    #chisq2 = np.sum(((y-one_gaussian(x, *optim2))**2)/(poisson.std(1/2*np.max(y),loc=0)**2))/(bins-len(guess6))\n",
    "    p2 = optim2.x\n",
    "    #print (optim2.x)\n",
    "    ypred2 = gaussian(x, p2[0], p2[1], p2[2],p2[3])\n",
    "    \n",
    "    LL2  = -np.sum(stats.poisson.logpmf(y, ypred2))\n",
    "    optim2 =p2\n",
    "    #atio = np.exp(7-4)*np.exp(LL1/LL2)\n",
    "    aic1 = 2*LL1+14\n",
    "    aic2 = 2*LL2+8\n",
    "    bic1 = -2*np.log(LL1)+7*np.log(bins)\n",
    "    bic2 = -2*np.log(LL2)+4*np.log(bins)\n",
    "    #print (aic1,LL1)\n",
    "    #para1,aicf1,aicf2=error(optim1,optim2,x,y,guess6)\n",
    "    #interen = integrate.quad(lambda x: gaussian(x,optim1[0],optim1[1],optim1[2],optim1[6]), -np.absolute((optim1[2]*3))+optim1[1],np.absolute(optim1[2]*3)+optim1[1])[0]\n",
    "    #intereb = integrate.quad(lambda x: two_gaussians_ra(x, *optim1[:7]), -np.absolute((optim1[5]*3))+optim1[4], -np.absolute((optim1[2]*3))+optim1[1])[0]\n",
    "    ##ratio = interen/(intereb)\n",
    "        \n",
    "    #if (p1[0] > 0) & (p1[2] > 0) & (p2[0] > 0):\n",
    "        #print ('two gaussian')\n",
    "    #else:\n",
    "        #print ('one gaussian')\n",
    "    #print (str(k)+'&'+str(np.round(aic1,2))+'&'+str(np.round(aic2,2))+'&'+str(np.round(bic1,2))+'&'+str(np.round(bic2,2))+'\\\\')\n",
    "    #print ('err',np.sqrt(np.diag(success2)))\n",
    "    if plot == True:\n",
    "        plt.scatter(x,y, c='pink', label='measurement', marker='.', edgecolors=None)\n",
    "        plt.plot(x, ypred, c='b', label='fit of Lorentz + Gaussians')\n",
    "        plt.title(\"Lorentz + Gaussian Fitting\")\n",
    "        plt.ylabel(\"Number of pairs\")\n",
    "        plt.xlabel(\"Velocity Difference\")\n",
    "        plt.legend(loc='upper left')\n",
    "        plt.savefig('./halo12_results/halo12_2_2fit'+str(k)+'12grav2.5Loz.png')\n",
    "        plt.show()\n",
    "        plt.scatter(x,y, c='pink', label='measurement', marker='.', edgecolors=None)\n",
    "        plt.plot(x, (gaussian(x, p2[0], p2[1], p2[2], p2[3])), c='b', label='fit of 1 Gaussians')\n",
    "        plt.title(\"One gaussian fitting\")\n",
    "        plt.xlabel(\"Velocity Difference\")\n",
    "        plt.legend(loc='upper left')\n",
    "        plt.savefig('./halo12_results/halo12_2_1fit'+str(k)+'12grav2.5Loz.png')\n",
    "        plt.show()\n",
    "    \n",
    "    #return \n",
    "    #np.sum(np.absolute((one_gaussian(x, *optim2) - y)**2/one_gaussian(x, *optim2)))\n",
    "    #if np.absolute(aic1)-np.absolute(aic2) < 0:\n",
    "        #return LL1,p1\n",
    "    #else:\n",
    "        #return LL2,p2\n",
    "         \n",
    "    #if np.absolute(chisq1) < np.absolute(chisq2):\n",
    "        \n",
    "        interen = integrate.quad(lambda x: Lorentz1D_mo_ra(x, *optim1), -np.absolute((optim1[2]/2*3))+optim1[1],np.absolute(optim1[2]/2*3)+optim1[1])[0]\n",
    "        intereb = simps(y, dx=np.absolute(x[0]-x[1]))\n",
    "        print (optim1[2]/2,intereb)\n",
    "        ratio = interen/(intereb)\n",
    "        \n",
    "        #print ('test',interen,intereb,-optim1[2]*3+optim1[1], optim1[2]*3+optim1[1],-optim1[5]*3+optim1[4], -optim1[2]*3+optim1[1],ratio)\n",
    "    \n",
    "        #return optim1,chisq1,success1,ratio\n",
    "    #else:\n",
    "        #print (chisq2)\n",
    "    return optim1,optim2,aic1,aic2,ratio\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fitting_final(data,ap1,c1, width1, ap2, c2, width2,offset,bins,plot):\n",
    "    optim = []\n",
    "    integrer = []\n",
    "    optim1f = []\n",
    "    optim2f = []\n",
    "    fn = open(\"./halo12_results/halo12_2_file2_12kpclztest.txt\", \"w\")\n",
    "    fn2 =  open(\"./halo12_results/halo12_2_file1_12kpclztest.txt\", \"w\")\n",
    "    for ii in range(0,len(data)):\n",
    "        datat = data[ii][( data[ii]< 1000)  & (data[ii] > -1000)]\n",
    "        y16 = np.percentile(datat, 0.3, axis=0)\n",
    "        y84 = np.percentile(datat, 99.7, axis=0)\n",
    "        datay, datax = np.histogram(data[ii][( data[ii]< y84+y84*0.2)  & (data[ii] > y16+y16*0.2)], density=False,bins=bins)\n",
    "        optim1,optim2,aic1,aic2,ratio = fitting_result(datax[:bins],datay,ap1,c1, width1, ap2,c2, width2,offset,bins,ii,plot)\n",
    "        #optim.append(np.append(result,chisq))  \n",
    "        optim1f.append(optim1)\n",
    "        optim2f.append(optim2)\n",
    "        #optim1,optim2,aic1,aic2,ratio = fitting_result(data[data.keys()[ii+1]][(data[data.keys()[ii+1]] > -1000) &( data[data.keys()[ii+1]] < 1000)],data[data.keys()[ii]][(data[data.keys()[ii+1]] > -1000) &( data[data.keys()[ii+1]] < 1000)],ap1,c1, width1, ap2,c2, width2,offset,0,bins,ii)\n",
    "        #optim.append(np.append(result,chisq))\n",
    "       # print (result)\n",
    "        #if len(result) > 5:\n",
    "        fn.write('& ' + str(np.round(aic1,2)) + '& ' +str(np.round(optim1[0],2))+'& '+str(np.round(optim1[1],2))+ '& '+str(np.round(optim1[2],2))+'& '+str(np.round(optim1[3],2)) + '& '\n",
    "               +str(np.round(optim1[4],2))+'& '+str(np.round(optim1[5],2))+'&  '+str(np.round(ratio,2))+ \"\\\\\"+'\\n')\n",
    "        fn2.write('& ' + str(np.round(aic2,2)) + '& ' +str(np.round(optim2[0],2))+'& '+str(np.round(optim2[1],2))+ '& '+str(np.round(optim2[2],2))+ '&  '+str(np.round(ratio,2))\n",
    "               + \"\\\\\"+'\\n')\n",
    "        #print (ratio)\n",
    "    fn.close()\n",
    "    fn2.close()\n",
    "    return optim1f,optim2f,aic1,aic2,ratio,para1,aicf1,aicf2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# the cell below has error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test <function unary_to_nary.<locals>.nary_operator.<locals>.nary_f at 0x7fb257930a60> [   1.63190327    5.45090093   10.70670883   17.82103774   27.29131266\n",
      "   39.68629986   55.63384572   75.79900399  100.85134417  131.42109904\n",
      "  168.04501365  211.10423087  260.75815266  316.87975175  378.99903155\n",
      "  446.26198737  517.4122873   590.80182718  664.43432512  736.04342292\n",
      "  803.20395558  863.47379679  914.57039242  954.63859788  983.14817995\n",
      " 1016.27074644 1041.22357595  976.56985997  942.63045625  898.28664857\n",
      "  843.68727459  780.72829412  711.73409552  639.1471377   565.34772575\n",
      "  492.51790987  422.53986838  356.92913486  296.80248368  242.87782251\n",
      "  195.50106973  154.69335702  120.21117918   91.61227853   68.32093424\n",
      "   49.68768776   35.04012168   23.72288821   15.12657537    8.70609162] [   7   10   14   15   20   40   58   70   99  125  182  251  320  351\n",
      "  418  476  521  644  708  769  771  771  917  977  995  992 1055  956\n",
      "  914  876  817  766  715  627  585  501  441  344  278  254  178  125\n",
      "   82   72   54   37   24   15    9    6]\n",
      "1 236.74775838713782\n",
      "parameters [ 3.72083732e+03  4.25447029e+00  1.39629408e+00  9.99683439e+02\n",
      " -3.47424188e+00  2.37711136e+02 -6.95352375e+00]\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "loop of ufunc does not support argument 0 of type ArrayBox which has no callable exp method",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;31mAttributeError\u001b[0m: 'ArrayBox' object has no attribute 'exp'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-52-f4796144bd12>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0moptim1f\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moptim2f\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maic1f\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maic2f\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mRATIO\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpara1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maicf1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maicf2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfitting_final\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest1f\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-50-438454b0d030>\u001b[0m in \u001b[0;36mfitting_final\u001b[0;34m(data, ap1, c1, width1, ap2, c2, width2, offset, bins, plot)\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0my84\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m99.7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0mdatay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdatax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistogram\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mii\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mii\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m<\u001b[0m \u001b[0my84\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my84\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mii\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0my16\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my16\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdensity\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0moptim1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moptim2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maic1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maic2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mratio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfitting_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatax\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdatay\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0map1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0map2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moffset\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mii\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0;31m#optim.append(np.append(result,chisq))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0moptim1f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptim1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-49-2170262aed11>\u001b[0m in \u001b[0;36mfitting_result\u001b[0;34m(x, y, amplitude, x_0, fwhm, h2, c2, w2, offset, bins, k, plot)\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'1'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mLorentz1D_mo_e\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'parameters'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhessian_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m     \u001b[0;31m#var = lin.inv(hessian_(p1))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36mnary_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0munary_operator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munary_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mnary_op_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mnary_op_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnary_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnary_operator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/differential_operators.py\u001b[0m in \u001b[0;36mhessian\u001b[0;34m(fun, x)\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mhessian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0;34m\"Returns a function that computes the exact Hessian.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mjacobian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjacobian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0munary_to_nary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36mnary_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0munary_operator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munary_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mnary_op_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mnary_op_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnary_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnary_operator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/differential_operators.py\u001b[0m in \u001b[0;36mjacobian\u001b[0;34m(fun, x)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;34m(\u001b[0m\u001b[0mout1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0mthen\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mJacobian\u001b[0m \u001b[0mhas\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \"\"\"\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mvjp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_make_vjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0mans_vspace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mans\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mjacobian_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mans_vspace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/core.py\u001b[0m in \u001b[0;36mmake_vjp\u001b[0;34m(fun, x)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmake_vjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mstart_node\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mVJPNode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_root\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mend_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_node\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_node\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mend_node\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mvjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/tracer.py\u001b[0m in \u001b[0;36mtrace\u001b[0;34m(start_node, fun, x)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace_stack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mstart_box\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_node\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         \u001b[0mend_box\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_box\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_box\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_trace\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mstart_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_trace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_node\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36munary_f\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0msubargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubvals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msubargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36mnary_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0munary_operator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munary_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mnary_op_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mnary_op_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnary_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnary_operator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/differential_operators.py\u001b[0m in \u001b[0;36mjacobian\u001b[0;34m(fun, x)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;34m(\u001b[0m\u001b[0mout1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0mthen\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mJacobian\u001b[0m \u001b[0mhas\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \"\"\"\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mvjp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_make_vjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0mans_vspace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mans\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mjacobian_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mans_vspace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/core.py\u001b[0m in \u001b[0;36mmake_vjp\u001b[0;34m(fun, x)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmake_vjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mstart_node\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mVJPNode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_root\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mend_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_node\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_node\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mend_node\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mvjp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mvspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/tracer.py\u001b[0m in \u001b[0;36mtrace\u001b[0;34m(start_node, fun, x)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace_stack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mstart_box\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_node\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         \u001b[0mend_box\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_box\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_box\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_trace\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mstart_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_trace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_box\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_node\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36munary_f\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0msubargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubvals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msubargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/thesis_idea_test/autograd/autograd/autograd/wrap_util.py\u001b[0m in \u001b[0;36munary_f\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0msubargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubvals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msubargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                 \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-22-cfeeb69e6195>\u001b[0m in \u001b[0;36mLorentz1D_mo_e\u001b[0;34m(params)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     ypred = (Loz(xdata,amplitude,x_0,fwhm) +\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mgaussian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         offset)\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m#LL = -np.sum(stats.norm.logpdf(ydata, loc=ypred, scale=sd) )\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-20-087d6ecc7e19>\u001b[0m in \u001b[0;36mgaussian\u001b[0;34m(x, height, center, width, offset)\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mLL\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgaussian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcenter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcenter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mwidth\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0moffset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: loop of ufunc does not support argument 0 of type ArrayBox which has no callable exp method"
     ]
    }
   ],
   "source": [
    "#running the fitting \n",
    "optim1f,optim2f,aic1f,aic2f,RATIO,para1,aicf1,aicf2 = fitting_final(test1f[1],8,0, 30, 300,0, 200,0,50,True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "> \u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/ipykernel/kernelbase.py\u001b[0m(904)\u001b[0;36m_input_request\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m    902 \u001b[0;31m            \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m    903 \u001b[0;31m                \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m--> 904 \u001b[0;31m                \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m    905 \u001b[0;31m            \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\u001b[0;32m    906 \u001b[0;31m                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "--KeyboardInterrupt--\n",
      "\n",
      "KeyboardInterrupt: Interrupted by user\n"
     ]
    }
   ],
   "source": [
    "import pdb\n",
    "pdb.pm()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "optim1f,optim2f,aic1f,aic2f,RATIO,para1,aicf1,aicf2 = fitting_final(test1f[1],8,0, 30, 300,0, 200,0,50,True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[949.99998667  13.99999999   8.00000009]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#testing the example given by the \n",
    "A = np.array([950])\n",
    "src = np.array([14,8])\n",
    "det = np.array([np.arange(5,20),np.arange(5,20)])\n",
    "meas  = np.array(A/(np.square(src[0] - det[0,:])+np.square(src[1] - det[1,:])))\n",
    "\n",
    "def log_likelihood(params):\n",
    "    b = np.array([(params[0] / (np.square(params[1]- det[0,:]) + np.square(params[2] - det[1,:])))])\n",
    "    L = np.array(np.sum(b - np.multiply(meas, np.log(b))))\n",
    "    return L\n",
    "\n",
    "x0 = np.array([800,11,5])\n",
    "jacobian_ = jacobian_1(log_likelihood)\n",
    "hessian_ = hessian_1(log_likelihood)\n",
    "\n",
    "MLE = minimize(log_likelihood,x0,method='Nelder-Mead')\n",
    "print (MLE.x)\n",
    "var = lin.inv(hessian_(MLE.x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
